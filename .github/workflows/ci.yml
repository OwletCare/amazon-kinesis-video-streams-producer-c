name: Producer C SDK CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches:
      - develop
      - master
jobs:
  # clang-format-check:
  #   runs-on: macos-11
  #   steps:
  #     - name: Clone repository
  #       uses: actions/checkout@v2
  #     - name: Install clang-format
  #       run: |
  #         brew install clang-format@8
  #     - name: Run clang format check
  #       run: |
  #         bash scripts/check-clang.sh

  # mac-os-catalina-build-gcc:
  #   runs-on: macos-latest
  #   permissions:
  #     id-token: write
  #     contents: read
  #   env:
  #     CC: gcc-11
  #     CXX: g++-11
  #   steps:
  #     - name: Clone repository
  #       uses: actions/checkout@v2
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         role-to-assume: arn:aws:iam::502759840390:role/GitHubActionsRole
  #         role-session-name: SampleRoleSession
  #         aws-region: us-west-2
  #     - name: Build repository and run tests with and without auth
  #       run: |
  #         mkdir build && cd build
  #         sh -c 'cmake .. -DBUILD_TEST=TRUE;cmake .. -DBUILD_TEST=TRUE'
  #         make
  #         ./tst/producer_test --gtest_break_on_failure

  # mac-os-catalina-build-clang:
  #   runs-on: macos-latest
  #   permissions:
  #     id-token: write
  #     contents: read
  #   env:
  #     CC: clang
  #     CXX: clang++
  #   steps:
  #     - name: Clone repository
  #       uses: actions/checkout@v2
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         role-to-assume: arn:aws:iam::502759840390:role/GitHubActionsRole
  #         role-session-name: SampleRoleSession
  #         aws-region: us-west-2
  #     - name: Build repository
  #       run: |
  #         mkdir build && cd build
  #         sh -c 'cmake .. -DBUILD_TEST=TRUE -DCOMPILER_WARNINGS=TRUE;cmake .. -DBUILD_TEST=TRUE -DCOMPILER_WARNINGS=TRUE'
  #         make
  #         ./tst/producer_test --gtest_break_on_failure

  # linux-gcc-code-coverage:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     id-token: write
  #     contents: read
  #   steps:
  #     - name: Clone repository
  #       uses: actions/checkout@v2
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         role-to-assume: arn:aws:iam::502759840390:role/GitHubActionsRole
  #         role-session-name: SampleRoleSession
  #         aws-region: us-west-2
  #     - name: Build repository
  #       run: |
  #         mkdir build && cd build
  #         cmake .. -DCODE_COVERAGE=TRUE -DBUILD_TEST=TRUE -DBUILD_COMMON_LWS=TRUE
  #         export AWS_KVS_LOG_LEVEL=3
  #         make
  #         ulimit -c unlimited -S
  #         timeout --signal=SIGABRT 150m ./tst/producer_test --gtest_break_on_failure
  #     - name: Code coverage
  #       run: |
  #         for test_file in $(find cproducer.dir kvsCommonCurl.dir kvsCommonLws.dir -name '*.gcno'); do gcov $test_file; done
  #         bash <(curl -s https://codecov.io/bash)

  # address-sanitizer:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     id-token: write
  #     contents: read
  #   env:
  #     CC: clang
  #     CXX: clang++
  #   steps:
  #     - name: Clone repository
  #       uses: actions/checkout@v2
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         role-to-assume: arn:aws:iam::502759840390:role/GitHubActionsRole
  #         role-session-name: SampleRoleSession
  #         aws-region: us-west-2
  #     - name: Build repository
  #       run: |
  #         mkdir build && cd build
  #         cmake .. -DBUILD_TEST=TRUE -DADDRESS_SANITIZER=TRUE -DBUILD_COMMON_LWS=TRUE
  #         export AWS_KVS_LOG_LEVEL=3
  #         make
  #         ulimit -c unlimited -S
  #         timeout --signal=SIGABRT 150m ./tst/producer_test --gtest_break_on_failure

  # undefined-behavior-sanitizer:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     id-token: write
  #     contents: read
  #   env:
  #     CC: clang
  #     CXX: clang++
  #   steps:
  #     - name: Clone repository
  #       uses: actions/checkout@v2
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         role-to-assume: arn:aws:iam::502759840390:role/GitHubActionsRole
  #         role-session-name: SampleRoleSession
  #         aws-region: us-west-2
  #     - name: Build repository
  #       run: |
  #         mkdir build && cd build
  #         cmake .. -DBUILD_TEST=TRUE -DUNDEFINED_BEHAVIOR_SANITIZER=TRUE -DBUILD_COMMON_LWS=TRUE
  #         export AWS_KVS_LOG_LEVEL=3
  #         make
  #         ulimit -c unlimited -S
  #         timeout --signal=SIGABRT 150m ./tst/producer_test --gtest_break_on_failure

  # memory-sanitizer:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     id-token: write
  #     contents: read
  #   env:
  #     CC: clang
  #     CXX: clang++
  #   steps:
  #     - name: Clone repository
  #       uses: actions/checkout@v2
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         role-to-assume: arn:aws:iam::502759840390:role/GitHubActionsRole
  #         role-session-name: SampleRoleSession
  #         aws-region: us-west-2
  #     - name: Build repository
  #       run: |
  #         mkdir build && cd build
  #         cmake .. -DBUILD_TEST=TRUE -DMEMORY_SANITIZER=TRUE -DBUILD_COMMON_LWS=TRUE
  #         export AWS_KVS_LOG_LEVEL=3
  #         make
  #         ulimit -c unlimited -S
  #         timeout --signal=SIGABRT 150m ./tst/producer_test --gtest_break_on_failure

  # thread-sanitizer:
  #   runs-on: ubuntu-18.04
  #   permissions:
  #     id-token: write
  #     contents: read
  #   env:
  #     CC: clang
  #     CXX: clang++
  #   steps:
  #     - name: Clone repository
  #       uses: actions/checkout@v2
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         role-to-assume: arn:aws:iam::502759840390:role/GitHubActionsRole
  #         role-session-name: SampleRoleSession
  #         aws-region: us-west-2
  #     - name: Build repository
  #       run: |
  #         mkdir build && cd build
  #         cmake .. -DBUILD_TEST=TRUE -DTHREAD_SANITIZER=TRUE -DBUILD_COMMON_LWS=TRUE
  #         export AWS_KVS_LOG_LEVEL=3
  #         make
  #         ulimit -c unlimited -S
  #         timeout --signal=SIGABRT 150m ./tst/producer_test --gtest_break_on_failure

  # linux-gcc-4_4:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     id-token: write
  #     contents: read
  #   steps:
  #     - name: Clone repository
  #       uses: actions/checkout@v2
  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         role-to-assume: arn:aws:iam::502759840390:role/GitHubActionsRole
  #         role-session-name: SampleRoleSession
  #         aws-region: us-west-2
  #     - name: Install deps
  #       run: |
  #         sudo sh -c 'echo 0 > /proc/sys/net/ipv6/conf/all/disable_ipv6'
  #         sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
  #         sudo add-apt-repository 'deb http://archive.ubuntu.com/ubuntu/ trusty main'
  #         sudo add-apt-repository 'deb http://archive.ubuntu.com/ubuntu/ trusty universe'
  #         sudo apt-get -q update
  #         sudo apt-get -y install gcc-4.4
  #         sudo apt-get -y install gdb
  #     - name: Build repository
  #       run: |
  #         export CC=gcc-4.4
  #         mkdir build && cd build
  #         cmake .. -DBUILD_TEST=TRUE -DBUILD_COMMON_LWS=TRUE
  #         export AWS_KVS_LOG_LEVEL=3
  #         make
  #         ulimit -c unlimited -S
  #         timeout --signal=SIGABRT 150m ./tst/producer_test --gtest_break_on_failure

  windows-msvc:
    runs-on: windows-2019
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::502759840390:role/GitHubActionsRole
          role-session-name: SampleRoleSession
          aws-region: us-west-2
      - name: Setup MSVC 
        uses: ilammy/msvc-dev-cmd@v1
      - name: Build and run
        run: |
          pwd
          choco install nasm strawberryperl
          $env:Path += ';C:\Strawberry\perl\site\bin;C:\Strawberry\perl\bin;C:\Strawberry\c\bin;C:\Program Files\NASM;D:\a\amazon-kinesis-video-streams-producer-c\amazon-kinesis-video-streams-producer-c\open-source\lib;D:\a\amazon-kinesis-video-streams-producer-c\amazon-kinesis-video-streams-producer-c\open-source\bin'
          echo $env:Path
          .github/build_windows.bat

  # arm-cross-compilation:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Set up QEMU
  #       id: qemu
  #       uses: docker/setup-qemu-action@v1
  #       with:
  #         image: tonistiigi/binfmt:latest
  #         platforms: arm64
  #     - name: Install dependencies
  #       run: 
  #         sudo apt-get -y install gcc-arm-linux-gnueabi g++-arm-linux-gnueabi binutils-arm-linux-gnueabi
  #     - name: Clone repository
  #       uses: actions/checkout@v2
  #     - name: Build Repository
  #       run: |
  #         sudo sh -c 'echo 0 > /proc/sys/net/ipv6/conf/all/disable_ipv6'
  #         mkdir build && cd build
  #         export CC=arm-linux-gnueabi-gcc CXX=arm-linux-gnueabi-g++ AR=arm-linux-gnueabi-ar
  #         cmake .. -DBUILD_TEST=TRUE -DBUILD_OPENSSL_PLATFORM=linux-generic32
  #         make
          
